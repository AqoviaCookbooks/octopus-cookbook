##Helper Functions. These wont get exported by the module, but will be available to be used by the exported cmdlets
function Put-OctopusResource([string]$uri, [object]$resource) {
    Invoke-RestMethod -Method Put -Uri "$env:OctopusURL/$uri" -Body $($resource | ConvertTo-Json -Depth 10) -Headers $c.header -Verbose:$false
}

function Get-OctopusResource([string]$uri, [object]$header) {
    
    return Invoke-RestMethod -Method Get -Uri "$env:OctopusURL/$uri" -Headers $header -Verbose:$false
}

function Get-UserConfirmation{ #Credits to http://www.peetersonline.nl/2009/07/user-confirmation-in-powershell/
   
           param([string]$title="Confirm`n",[string]$message)

           $choiceYes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", "Answer Yes."

           $choiceNo = New-Object System.Management.Automation.Host.ChoiceDescription "&No", "Answer No."

           $options = [System.Management.Automation.Host.ChoiceDescription[]]($choiceYes, $choiceNo)

           $result = $host.ui.PromptForChoice($title, $message, $options, 1)

           Switch ($result){
              0{Return $true}
 
              1{Return $false}
           }
        }

#I'm quite sure there's an easier way to do this than using this ugly variable. Bet well...
function Get-OctopusVariableScopeValue{    
    param(
        [parameter(Mandatory=$true)]
        [Octopus.Client.Model.VariableSetResource]$Resource,

        [parameter(Mandatory=$true)]
        [String]$VariableName

    )

    $list = @()

    $varscopes = ($Resource.Variables | ?{$_.name -eq $variableName}).scope

    $scopevalues += $Resource.ScopeValues.Environments
    $scopevalues += $Resource.ScopeValues.Machines
    $scopevalues += $Resource.ScopeValues.Actions
    
    $varscopes.getenumerator() | %{        

        $value = @()
        If ($_.key -ne "Role"){
            foreach ($v in $_.value){
                $value += $scopevalues | ?{$_.Id -eq $v} | select -ExpandProperty name
            } 
        }

        else{$value = $_.value}

        $obj = [pscustomobject]@{
            Scope = $_.key
            value = $value
        }
        $list += $obj
    }
    
   return $list
}

<#
.Synopsis
   Sets the current Octopus connection info (URL and API Key). 
   
   Highly recommended to call this function from $profile to avoid having to re-configure this on every session.
.DESCRIPTION
   Sets the current Octopus connection info (URL and API Key). 
   
   Highly recommended to call this function from $profile to avoid having to re-configure this on every session.
.EXAMPLE
   Set-OctopusConnectionInfo -URL "http://MyOctopus.AwesomeCompany.com" -API "API-7CH6XN0HHOU7DDEEUGKUFUR1K"
   Set connection info with a specific API Key for an Octopus instance
.LINK
   Github project: ghttps://github.com/Dalmirog/Octoposh
#>
function Set-OctopusConnectionInfo
{
    [CmdletBinding()]
    Param
    (
        # Octopus URL
        [Parameter(Mandatory=$true)]
        [string]$URL,

        # Octopus API Key
        [Parameter(Mandatory=$true)]
        [string]$APIKey
    )
    Begin
    {
        
    }
    Process
    {
        $env:OctopusURL = $URL
        $env:OctopusAPIKey = $APIKey        
    }
    End
    {
        Get-octopusConnectionInfo
    }
}

<#
.Synopsis
   This function gets the data of the variables $env:OctopusURI and $env:OctopusAPI that are used by all the cmdlets of the Octoposh module
.DESCRIPTION
   This function gets the data of the variables $env:OctopusURI and $env:OctopusAPI that are used by all the cmdlets of the Octoposh module
.EXAMPLE
   Get-OctopusConnectionInfo
   Get the current connection info. Its the same as getting the values of $env:OctopusURL and $Env:OctopusAPIKey
.LINK
   Github project: ghttps://github.com/Dalmirog/Octoposh
#>
function Get-OctopusConnectionInfo
{
    Begin
    {
        
    }
    Process
    {
        $properties = [ordered]@{
            OctopusURL = $env:OctopusURL
            OctopusAPIKey = $env:OctopusAPIKey
        }

        $o =  new-object psobject -Property $properties
    }
    End
    {

        return $o

    }
}

<#
.Synopsis
   Creates an endpoint to connect to Octopus
.DESCRIPTION
   Creates an endpoint to connect to Octopus
.EXAMPLE
   $c = New-octopusconnection ; $c.repository.environments.findall()
   Get all the environments on the Octopus instance using New-OctopusConnection and the Octopus.client
.EXAMPLE
   $c = New-OctopusConnection ; invoke-webrequest -header $c.header -uri http://Octopus.company.com/api/environments/all -method Get
   Use the [Header] Member of the Object returned by New-OctopusConnection as a header to call the REST API using Invoke-WebRequest 
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function New-OctopusConnection
{

    Begin
    {
        If(([string]::IsNullOrEmpty($env:OctopusURL)) -or ([string]::IsNullOrEmpty($env:OctopusAPIKey)))
        {
            throw "At least one of the following variables does not have a value set: `$env:OctopusURL or `$env:OctopusAPIKey. Use Set-OctopusConnectionInfo to set these values"            
        }
    }
    Process
    {
        $endpoint = new-object Octopus.Client.OctopusServerEndpoint "$($Env:OctopusURL)","$($env:OctopusAPIKey)"    
        $repository = new-object Octopus.Client.OctopusRepository $endpoint                     

        $properties = [ordered]@{
            endpoint = $endpoint
            repository = $repository
            header = @{ "X-Octopus-ApiKey" = $env:OctopusAPIKey }
        }

        $output = New-Object psobject -Property $properties        
    }
    End
    {
        return $output
    }
}

<#
.Synopsis
   Gets information about Octopus Environments
.DESCRIPTION
   Gets information about Octopus Environments
.EXAMPLE
   Get-OctopusEnvironment -name Production
   Get info about the environment "Production"
.EXAMPLE
   Get-OctopusEnvironment -name "Dev*"
   Get info about all the environments whose name starts with "Dev"
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function Get-OctopusEnvironment
{
    [CmdletBinding()]
    [Alias()]
    Param
    (
        # Environment name        
        [alias("Name")]
        [Parameter(ValueFromPipelineByPropertyName = $true, Position=0)]
        [string[]]$EnvironmentName,
        
        # When used the cmdlet will only return the plain Octopus resource object
        [switch]$ResourceOnly
    )

    Begin
    {
        $c = New-OctopusConnection
        $list = @()
        $i = 1
    }
    Process
    {

        If(!($EnvironmentName -eq $null)){            
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting environments by name: $EnvironmentName" 
            $environments = $c.repository.Environments.FindMany({param($env) if (($env.name -in $EnvironmentName) -or ($env.name -like $EnvironmentName)) {$true}})
            
            foreach($N in $EnvironmentName){
                If(($n -notin $environments.name) -and !($environments.name -like $n)){
                
                    Write-Error "Environment not found: $n"
                    #write-host "Environment not found: $n" -ForegroundColor Red
                }
            }

        }

        else{
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting all Environments" 
            $environments = $c.repository.Environments.FindAll()
        }

        Write-Verbose "[$($MyInvocation.MyCommand)] Environments found: $($environments.count)" 

        If ($ResourceOnly){
            Write-Verbose "[$($MyInvocation.MyCommand)] [ResourceOnly] switch is on. Returning raw Octopus resource objects"
            $list += $environments
        }
        Else{
            $dashboard = Get-OctopusResource "/api/dashboard/dynamic" -header $c.header

            foreach ($e in $environments){

                Write-Progress -Activity "Getting info from Environment: $($E.name)" -status "$i of $($environments.count)" -percentComplete ($i / $environments.count*100)
                Write-Verbose "[$($MyInvocation.MyCommand)] Getting info from environment $($e.name)"

                $deployments = @()

                $m = $c.repository.Machines.FindMany({param($ma) if ($e.id -in $ma.EnvironmentIds){$true}})

                $dashboardItem = $dashboard.Items | ?{$e.Id -eq $_.EnvironmentId}

                foreach($d in $dashboardItem){
                
                    $t = $c.repository.Tasks.Get($d.links.task)

                    $dev = (Invoke-WebRequest -Uri "$env:OctopusURL/api/events?regarding=$($d.Id)" -Method Get -Headers $c.header | ConvertFrom-Json).items | ? {$_.category -eq "DeploymentQueued"}

                    $obj = [PSCustomObject]@{
                            ProjectName = ($dashboard.Projects | ?{$_.id -eq $d.projectId}).name
                            EnvironmentName = ($dashboard.Environments | ?{$_.id -eq $d.EnvironmentId}).name
                            ReleaseVersion = $d.ReleaseVersion
                            State = $d.state
                            CreatedBy = $dev.username
                            StartTime = ($t.StartTime).datetime
                            EndTime = ($t.CompletedTime).datetime

                            }

                    $deployments += $obj
                }

                $obj = [PSCustomObject]@{
                                EnvironmentName = $e.name
                                Id = $e.id
                                Machines = $m
                                LatestDeployment = $deployments
                                Resource = $e
                                                        
                            }                                    
                $list += $obj

                $i++
            }
        }
    }
    End
    {
        If($list.count -eq 0){
            $list = $null
        }
        return $List
    }
}


<#
.Synopsis
   This cmdlet creates instances of Octopus Resource Objects
.DESCRIPTION
   This cmdlet creates instances of Octopus Resource Objects
.EXAMPLE
   $EnvironmentObj = Get-OctopusResourceModel -Resource Environment
   Create an Environment Resource object 
.EXAMPLE
   $ProjectObj = Get-OctopusResourceModel -Resource Project
   Create Project resource object
.EXAMPLE
   $pg = Get-OctopusResourceModel -Resource ProjectGroup
   Create a Project Group resource object
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function Get-OctopusResourceModel
{
    [CmdletBinding()]
    Param
    (
        # Resource object model
        [ValidateSet('Environment','Project','ProjectGroup','NugetFeed','LibraryVariableSet','Machine','Lifecycle')]         
        [string]$Resource
    )

    Begin
    {
        $c = New-OctopusConnection
    }
    Process
    {
        Switch ($Resource){ 
            'Environment' {$o = New-Object Octopus.Client.Model.EnvironmentResource}
            'Project' {$o = New-Object Octopus.Client.Model.ProjectResource}
            'ProjectGroup' {$o = New-Object Octopus.Client.Model.ProjectGroupResource}
            'NugetFeed' {$o = New-Object Octopus.Client.Model.FeedResource}
            'LibraryVariableSet' {$o = New-Object Octopus.Client.Model.LibraryVariableSetResource}
            'Machine' {$o = New-Object Octopus.Client.Model.MachineResource}
            'Lifecycle' {$o = New-Object Octopus.Client.Model.LifecycleResource}
        }      
    }
    End
    {
        return $o
    }
}

<#
.Synopsis
   Updates Octopus Resources on the database.   
   This is an advanced cmdlet and all its examples involve multiple lines of code. Please check the advanced examples for a better reference: https://github.com/Dalmirog/OctoPosh/wiki/Modifying-Resources
.DESCRIPTION
   Updates Octopus Resources on the database.   
   This is an advanced cmdlet and all its examples involve multiple lines of code. Please check the advanced examples for a better reference: https://github.com/Dalmirog/OctoPosh/wiki/Modifying-Resources
.EXAMPLE
    $pg = Get-OctopusProjectGroup -name SomeProjectName ; $pg.resource.name = "SomeOtherProjectName" ; $Pg | Update-OctopusResource
    Update the Name of a ProjectGroup   
.EXAMPLE
    $machine = Get-OctopusMachine -MachineName "SQL_Production" ; $machine.resource.isdisabled = $true ; $machine | Update-OctopusResource
    
    Update the [IsDisabled] property of a machine to disable it
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Advanced Cmdlet Usage: https://github.com/Dalmirog/OctoPosh/wiki/Modifying-Resources
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function Update-OctopusResource
{
    [CmdletBinding(DefaultParameterSetName='Update')]
    Param
    (
        # Octopus resource object
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   ParameterSetName = 'Update',
                   Position=0)]
        [object[]]$Resource,

        # Prints a list of the resource types accepted by the parameter $Resource.
        [parameter(ParameterSetName = 'ListAcceptedTypes')]
        [switch]$AcceptedTypes,
        
        # Forces cmdlet to continue without prompting
        [switch]$Force
    )

    Begin
    {
        If($AcceptedTypes){

            $types = ("Octopus.Client.Model.ProjectGroupResource",
            "Octopus.Client.Model.ProjectResource",
            "Octopus.Client.Model.EnvironmentResource",
            "Octopus.Client.Model.MachineResource",
            "Octopus.Client.Model.FeedResource",
            "Octopus.Client.Model.VariableSetResource",
            "Octopus.Client.Model.LifecycleResource")
            
            return $types
        }

        $c = New-OctopusConnection        
    }
    Process
    {
        Foreach ($r in $Resource){

            if(!($Force)){
                If (!(Get-UserConfirmation -message "Are you sure you want to update this resource? `n`n [$($R.GetType().tostring())] $($R.name)`n")){
                    Throw 'Canceled by user'
                }
            }
            switch ($r)
            {
                {$_.getType() -eq [Octopus.Client.Model.ProjectGroupResource]} {$ResourceType = 'ProjectGroups'}
                {$_.getType() -eq [Octopus.Client.Model.ProjectResource]} {$ResourceType = 'Projects'}
                {$_.getType() -eq [Octopus.Client.Model.EnvironmentResource]} {$ResourceType = 'Environments'}                
                {$_.getType() -eq [Octopus.Client.Model.MachineResource]} {$ResourceType = 'Machines'}          
                {$_.getType() -eq [Octopus.Client.Model.FeedResource]} {$ResourceType = 'Feeds'}                
                {$_.getType() -eq [Octopus.Client.Model.VariableSetResource]} {$ResourceType = 'VariableSets'}
                {$_.getType() -eq [Octopus.Client.Model.LifecycleResource]} {$ResourceType = 'Lifecycles'}
                Default{Throw "Invalid object type: $($_.getType()) `nRun 'Update-OctopusResource -AcceptedTypes' to get a list of the object types accepted by this cmdlet"}                
            }

            Write-Verbose "[$($MyInvocation.MyCommand)] Updating $ResourceType`: $($r.name)"

            Try{
                $UpdatedObject = $c.repository.$ResourceType.Modify($r)
            }
            Catch{
                Write-Error $_    
            }
        }
    }
    End
    {
        If(!$UpdatedObject){
            $UpdatedObject = $null
        }

        return $UpdatedObject
    }
}

<#
.Synopsis
   This cmdlet returns info about Octopus machines (tentacles)
.DESCRIPTION
   This cmdlet returns info about Octopus machines (tentacles)
.EXAMPLE
   Get-OctopusMachine -Name "Database_Prod"
   Gets the machine with the name "Database_Prod"
.EXAMPLE
    Get-OctopusMachine -Name "*_Prod"
    Gets all the machines which name is like "*_Prod"
.EXAMPLE
    Get-OctopusMachine -EnvironmentName "Staging","UAT"
    Gets all the machines on the environments "Staging","UAT"
.EXAMPLE
    Get-OctopusMachine -URL "*:10933"
    Gets all the machines with the string "*:10933" at the end of the URL
.EXAMPLE
    Get-OctopusMachine -Mode Listening
    Gets all the machines registered in "Listening" mode. "Polling" is also a valid value
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function Get-OctopusMachine
{
    [CmdletBinding(DefaultParameterSetName='Name')]
    Param
    (
        # Machine name
        [Alias('Name')]
        [Parameter(ValueFromPipelineByPropertyName=$true,
                   ParameterSetName = 'Name')]
        [string[]]$MachineName,

        # Environment name. Use to get all machines inside of an environment
        [Alias('Environment')]
        [Parameter(ValueFromPipelineByPropertyName=$true,
                   ParameterSetName = 'Environment')]
        [string[]]$EnvironmentName,

        # URL of the machine
        [Alias('URI')]
        [Parameter(ParameterSetName = 'URL')]
        [string[]]$URL,

        # Communication style of the machine. Only values accepted are "Listening" and "Polling"
        [Alias('Mode','TentacleMode')]
        [ValidateSet('Listening','Polling')]         
        [Parameter(ParameterSetName = 'CommunicationStyle')]
        [string]$CommunicationStyle,

        # When used the cmdlet will only return the plain Octopus resource object
        [switch]$ResourceOnly
    )

    Begin
    {
        $c = New-OctopusConnection
        $List = @()
        $i = 1
    }
    Process
    {
        If(($PSCmdlet.ParameterSetName -eq 'Name') -and !([string]::IsNullOrEmpty($MachineName))) {
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting Machines by $($PSCmdlet.ParameterSetName): $Machinename "
            $Machines = $c.repository.Machines.FindMany({param($Mach) if ((($Mach.name -in $MachineName) -or ($Mach.name -like $MachineName))) {$true}})

            foreach($n in $MachineName){
                        If(($n -notin $Machines.name) -and !($Machines.name -like $n)){
                            write-error "No Machines found with the name: $n"
                            #write-host "No Machines found with the name: $n" -ForegroundColor Red
                        }
            }
        }

        elseIf($PSCmdlet.ParameterSetName -eq 'CommunicationStyle') {
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting Machines by $($PSCmdlet.ParameterSetName): $CommunicationStyle"
            If($CommunicationStyle -eq 'Polling'){$Style = 'TentacleActive'}            
            elseIf($CommunicationStyle -eq 'Listening'){$Style = 'TentaclePassive'}

            $Machines = $c.repository.Machines.FindMany({param($Mach) if ($Mach.Endpoint.CommunicationStyle -eq $Style){$true}})

            If($Machines -eq $null){
                Write-Error "No Machines found with CommunicationStyle: $($Style)"
                #write-host "No Machines found with CommunicationStyle: $($Style)" -ForegroundColor Red
            }
        }

        elseIf(($PSCmdlet.ParameterSetName -eq 'URL') -and (!([string]::IsNullOrEmpty($URL)))) {
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting Machines by $($PSCmdlet.ParameterSetName): $URL"
            $Machines = $c.repository.Machines.FindMany({param($Mach) if ((($Mach.URI -in $URL) -or ($Mach.URI -like $URL))) {$true}})

            foreach($U in $URL){
                If(($U -notin $Machines.URI) -and !($Machines.URI -like $U)){
                    write-error "No Machines found with the URL: $U"
                    #write-host "No Machines found with the URL: $U" -ForegroundColor Red
                }
            }
        }

        elseIf(($PSCmdlet.ParameterSetName -eq 'Environment') -and !([string]::IsNullOrEmpty($EnvironmentName))) {
            
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting Machines by $($PSCmdlet.ParameterSetName): $EnvironmentName"
            $machines = @()

            $environments = Get-OctopusEnvironment $EnvironmentName -ResourceOnly

            Foreach($env in $environments){

                $envmachines = $c.repository.Environments.GetMachines($env)

                If($envmachines){
                    Write-Verbose "[$($MyInvocation.MyCommand)] [ResourceOnly] switch is on. Returning raw Octopus resource objects"
                    $machines += $envmachines            
                }

                Else{
                    Write-Error "No machines were found on Environment: $($env.name)"
                    #Write-host "No machines were found on Environment: $($env.name)" -ForegroundColor Red
                }        
            }    
        }

        else{        
            Write-Verbose "[$($MyInvocation.MyCommand)] Getting all the Machines"
            $Machines = $c.repository.Machines.FindAll()
        }

        Write-Verbose "[$($MyInvocation.MyCommand)] Machines found: $($Machines.count)"

        If($ResourceOnly){
            $list += $Machines
        }

        else{            
            foreach ($machine in $Machines){                
                Write-Progress -Activity "Getting info from machine: $($machine.name)" -status "$i of $($machines.count)" -percentComplete ($i / $machines.count*100)
                Write-Verbose "[$($MyInvocation.MyCommand)] Getting info of Machine: $($Machine.name)"

                $e = @() 

                If($environments){
                    $e = $environments | ?{$_.id -eq $machine.EnvironmentIds}
                }

                Else{
                    $e = Get-OctopusResource "api/environments/$($machine.EnvironmentIds)" -header $c.header
                }
                
                If($Machine.Endpoint.CommunicationStyle -eq 'TentacleActive'){$Style = 'Polling'}            
                If($Machine.Endpoint.CommunicationStyle -eq 'TentaclePassive'){$Style = 'Listening'}               

                $obj = [PSCustomObject]@{
                    MachineName = $machine.Name
                    MachineID = $machine.Id
                    Thumbprint = $machine.Thumbprint
                    URI = $machine.uri
                    IsDisabled = $machine.IsDisabled
                    EnvironmentName = $e.name
                    Roles = $machine.Roles
                    HasLatestCalamari = $machine.HasLatestCalamari
                    CommunicationStyle = $Style
                    Status = $machine.Status
                    StatusSummary = $machine.StatusSummary
                    Resource = $machine
                }

                $list += $obj
                
                $i++
            }
        }
    }
    End
    {
        If($list.count -eq 0){
            $list = $null
        }
        return $List 
    }
}

<##
.Synopsis
   Creates a new Octopus Resource out of a resource Object.
   This is an advanced cmdlet and all its examples involve multiple lines of code. Please check the advanced examples for a better reference: https://github.com/Dalmirog/OctoPosh/wiki/Advanced-Examples
.DESCRIPTION
   Creates a new Octopus Resource out of a resource Object.
   This is an advanced cmdlet and all its examples involve multiple lines of code. Please check the advanced examples for a better reference: https://github.com/Dalmirog/OctoPosh/wiki/Advanced-Examples
.EXAMPLE
   $pg = Get-OctopusResourceModel -Resource ProjectGroup ; $pg.name = "NewProjectGroup" ; New-OctopusResource -Resource $pg   
   Create a new Project Group called "NewProjectGroup" on Octopus
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function New-OctopusResource
{
    [CmdletBinding()]
    Param
    (
        # Resource Object
        [Parameter(Mandatory=$true,
                   ValueFromPipeline=$true,
                   Position=0)]
        $Resource
    )

    Begin
    {
        $c = New-OctopusConnection
    }
    Process
    {
        switch ($Resource)
        {
            {$_.getType() -eq [Octopus.Client.Model.ProjectGroupResource]} {$res = 'ProjectGroups'}
            {$_.getType() -eq [Octopus.Client.Model.ProjectResource]} {$res = 'Projects'}
            {$_.getType() -eq [Octopus.Client.Model.EnvironmentResource]} {$res = 'Environments'}
            {$_.getType() -eq [Octopus.Client.Model.FeedResource]} {$res = 'Feeds'}
            {$_.getType() -eq [Octopus.Client.Model.LibraryVariableSetResource]} {$res = 'LibraryVariableSets'}
            {$_.getType() -eq [Octopus.Client.Model.MachineResource]} {$res = 'Machines'}
            {$_.getType() -eq [Octopus.Client.Model.LifecycleResource]} {$res = 'Lifecycles'}
            Default{Throw "Invalid object type: $($_.getType()) `nRun 'Get-OctopusResourceModel -ListAvailable' to get a list of the object types accepted by this cmdlet"}
        }
        Write-Verbose "[$($MyInvocation.MyCommand)] Creating an $($resource.GetType()) object"
        $newres = $c.repository.$res.Create($resource)

    }
    End
    {
        return $newres
    }
}

<#
.Synopsis
   Starts a "Calamari Update" taks on a machine or set of machines inside of an environment
.DESCRIPTION
   Starts a "Calamari Update" taks on a machine or set of machines inside of an environment
.EXAMPLE
   Start-OctopusCalamariUpdate -Environment "Staging"
   Starts a "Calamari Update" task for all the machines inside of the environment "Staging"
.EXAMPLE
   Start-OctopusCalamariUpdate -MachineName "NY-DB1"
   Starts a "Calamari Update" task on the machine "NY-DB1"
.LINK
   Github project: https://github.com/Dalmirog/Octoposh
   Wiki: https://github.com/Dalmirog/OctoPosh/wiki
   QA and Cmdlet request: https://gitter.im/Dalmirog/OctoPosh#initial
#>
function Start-OctopusCalamariUpdate
{
    [CmdletBinding(DefaultParameterSetName='Machine')]    
    Param
    (
        # The name of the environment/s on which you wanna start a health check. A task will start for each Environment listed on this parameter
        [Parameter(Mandatory=$true,                   
                   ParameterSetName='Environment')]
        [string[]]$EnvironmentName,

        [Parameter(Mandatory=$true,                   
                   ParameterSetName='Machine')]
        [string[]]$MachineName,

        # The message that will show up on the Octopus task. If a value is not passed to this parameter, a default message will be used
        [string]$Message,

        # Forces cmdlet to continue without prompting
        [switch]$Force,

        # Waits until the task is not on states "Queued" or "Executing"
        [switch]$Wait,

        # Timeout for [Wait] parameter in minutes. Default timeout is 2 minutes
        [double]$Timeout = 2
    )

    Begin
    {
        $c = New-OctopusConnection
        $machines = @()
        $list = @()
    }
    Process
    {
        If($PSCmdlet.ParameterSetName -eq 'Environment'){
            foreach ($environment in $EnvironmentName){
            
                Write-Verbose "[$($MyInvocation.MyCommand)] Getting machines from Environment: $environment"

                $m = Get-OctopusMachine -EnvironmentName $Environment -ResourceOnly -ErrorAction Stop
                
                Write-Verbose "[$($MyInvocation.MyCommand)] Found $($m.count) machines in environment $environment"                

                $Machines += $m
            }
        }

        Else{
            $machines = Get-OctopusMachine -MachineName $MachineName -ResourceOnly -ErrorAction Stop
        }

        If(!$message -and $PSCmdlet.ParameterSetName -eq 'Machine'){
            $message = "[API Generated] Starting 'Calamari Update' task on Machines: $($machines.name)"
        }

        elseIf(!$message -and $PSCmdlet.ParameterSetName -eq 'Environment'){
            $message = "[API Generated] Starting 'Calamari Update' task on Environments: $EnvironmentName"
        }

        If(!($Force)){
            If (!(Get-UserConfirmation -message "Are you sure you want to start a health check on the environment: $Environment")){
                Throw 'Canceled by user'
            }
        }
        If($machines.count -ne 0){
            $task = $c.repository.Tasks.ExecuteCalamariUpdate($Message,$machines.id)
        }
        If($wait){

            $StartTime = Get-Date

            Do{
                $CurrentTime = Get-date
                    
                $task = Get-OctopusTask -ID $task.id
                    
                Start-Sleep -Seconds 2

                Write-Verbose "[Get-OctopusTask] Task state is: $($task.state)"
            }Until (($task.state -notin ('Queued','executing')) -or ($CurrentTime -gt $StartTime.AddMinutes($Timeout)))

            Write-Verbose "[Get-OctopusTask] Task finished or cmdlet timed out. Last task status: $($task.state.tostring().toupper())"
            return $task
        }

        else{
            return $task
        }        
    }   
    End
    {
    }
}